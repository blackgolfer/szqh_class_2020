2020.3.8 Github Pages
++++++++++++++++++++++++++

``github`` 上有　``html``　发布的功能，这里主要参照 [SphinxGithubPages]_，文章里有一处错误，
使得这个过程变得比较麻烦，所以以这里的信息为准。

首先建立一个分支　``gh-pages``　，一定要是这个名字的分支。

.. code-block:: shell

    git checkout --orphan gh-pages
    git rm -rf .
    rm -rf .
    echo "My Page" > index.html
    git add index.html
    git commit -m "first page commit"
    git push
    git checkout master

建立了这个分支后，需要在　``github`` 的设置中设置 ``github pages``　，注意要选这个分支。

接着，用　``sphinx-quickstart`` 重置一下项目。先查阅一下　``sphine-quickstart`` 的用法，

.. code-block:: console

    [zzhang@manjaro-pc-1 szqh_class_2020]$ sphinx-quickstart --help
    usage: sphinx-quickstart [OPTIONS] <PROJECT_DIR>

    生成 Sphinx 项目的必需文件。 sphinx-quickstart 是一个交互式工具，询问一些关于项目的问题，生成 完整的文档目录和用于 sphinx-build 的示例 Makefile。

    positional arguments:
    PROJECT_DIR           project root

    optional arguments:
    -h, --help            show this help message and exit
    -q, --quiet           静默模式
    --version             show program's version number and exit

    文档结构参数:
    --sep                 如果指定了此选项，将使用独立的源文件目录和构建目录
    --dot DOT             用点替代下划线，“ _templates”。

    项目基本参数:
    -p PROJECT, --project PROJECT  项目名称
    -a AUTHOR, --author AUTHOR 作者名称
    -v VERSION            项目版本
    -r RELEASE, --release RELEASE 项目发行版本
    -l LANGUAGE, --language LANGUAGE 项目语种
    --suffix SUFFIX       源文件后缀
    --master MASTER       主文档名
    --epub                启用 ePub 支持

    扩展程序选项:
    --ext-autodoc         启用 autodoc 扩展
    --ext-doctest         启用 doctest 扩展
    --ext-intersphinx     启用 intersphinx 扩展
    --ext-todo            启用 todo 扩展
    --ext-coverage        启用 coverage 扩展
    --ext-imgmath         启用 imgmath 扩展
    --ext-mathjax         启用 mathjax 扩展
    --ext-ifconfig        启用 ifconfig 扩展
    --ext-viewcode        启用 viewcode 扩展
    --ext-githubpages     启用 githubpages 扩展
    --extensions EXTENSIONS 启用多个扩展

    创建 Makefile 和批处理文件:
    --makefile            创建 Makefile
    --no-makefile         不创建 Makefile
    --batchfile           创建批处理文件
    --no-batchfile        不创建批处理文件
    -m, --use-make-mode   使用用于 Makefile/make.bat 的 Make 模式
    -M, --no-use-make-mode 不使用用于 Makefile/make.bat 的 Make 模式

    项目模板:
    -t TEMPLATEDIR, --templatedir TEMPLATEDIR 放置模板文件的模板目录
    -d NAME=VALUE         定义一个模板变量

    更多信息请访问 <http://sphinx-doc.org/>。
    [zzhang@manjaro-pc-1 szqh_class_2020]$ 


关键是扩展程序选项，在重置的时候，选取了　``autodoc`` , ``mathjax`` , ``githubpages`` 和　``viewcode``。

.. code-block:: python3

    # Configuration file for the Sphinx documentation builder.
    #
    # This file only contains a selection of the most common options. For a full
    # list see the documentation:
    # https://www.sphinx-doc.org/en/master/usage/configuration.html

    # -- Path setup --------------------------------------------------------------

    # If extensions (or modules to document with autodoc) are in another directory,
    # add these directories to sys.path here. If the directory is relative to the
    # documentation root, use os.path.abspath to make it absolute, like shown here.
    #
    # import os
    # import sys
    # sys.path.insert(0, os.path.abspath('.'))


    # -- Project information -----------------------------------------------------

    project = '量化投资学习项目'
    copyright = '2020, 张志峰'
    author = '张志峰'

    # The full version, including alpha/beta/rc tags
    release = '0.1'


    # -- General configuration ---------------------------------------------------

    # Add any Sphinx extension module names here, as strings. They can be
    # extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
    # ones.
    extensions = [
        'sphinx.ext.githubpages',
        'sphinx.ext.viewcode',
        'sphinx.ext.mathjax',
        'sphinx.ext.autodoc',
        'sphinxcontrib.tikz',
        'recommonmark',
        'sphinx_rtd_theme'
    ]

    # Add any paths that contain templates here, relative to this directory.
    templates_path = ['_templates']

    # The language for content autogenerated by Sphinx. Refer to documentation
    # for a list of supported languages.
    #
    # This is also used if you do content translation via gettext catalogs.
    # Usually you set "language" from the command line for these cases.
    language = 'zh_CN'

    # List of patterns, relative to source directory, that match files and
    # directories to ignore when looking for source files.
    # This pattern also affects html_static_path and html_extra_path.
    exclude_patterns =  ['_build'
                        ,'Thumbs.db'
                        ,'.DS_Store'
                        ,'docs/projects/mfm/mfm.rst'
                        ,'docs/projects/abs/abs.rst'
                        ,'docs/projects/mpp/mpp.rst'
                        ,'docs/projects/os/os.rst'
                        ,'docs/projects/ts/ts.rst'
                        ,'docs/typesetting/latex.rst'
                        ,'docs/typesetting/markdown.rst'
                        ,'docs/typesetting/sphinx.rst'
                        ]

    # -- Options for HTML output -------------------------------------------------

    # The theme to use for HTML and HTML Help pages.  See the documentation for
    # a list of builtin themes.
    #
    #html_theme = 'alabaster'
    html_theme = 'sphinx_rtd_theme'

    # Add any paths that contain custom static files (such as style sheets) here,
    # relative to this directory. They are copied after the builtin static files,
    # so a file named "default.css" will overwrite the builtin "default.css".
    html_static_path = ['_static']

    html_theme_options = {
        "style_external_links": "true",
        #"style_nav_header_background": "#0b750a"
    }

    html_css_files = {
        'css/custom.css',
    }

    # -- Extension configuration -------------------------------------------------

最后就是在 ``Makefile`` 中加一个任务来生成　``github pages``

.. code-block:: makefile

    gh-pages:

        @rm -rf /tmp/gh-pages
        @cp -r $(BUILDDIR)/html /tmp/gh-pages
        @git checkout gh-pages
        @rm -rf *
        @cp -r /tmp/gh-pages/* .
        @touch .nojekyll

生成　``github pages`` 的指令如下，

.. code-block:: shell

    make html
    make gh-pages
    git add .
    git commit -m "update github pages"
    git push
    git checkout master
