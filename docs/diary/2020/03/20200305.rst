2020.3.5 项目计划，续二
+++++++++++++++++++++++++

项目内容
***********

考虑再三还是觉得应该将运营与交易纳入进来。如果将视野放在基金的投资管理，
那么策略开发只是一个环节并且几乎被所有人青睐，运营与交易往往不被重视。但是，一个科学的，智能型的运营系统至关重要，
其重要性不亚于策略开发。

投资策略开发的一对矛盾是主观与客观的矛盾，而投资管理的矛盾则是创造性与自律性的矛盾。策略开发需要创造性，
而保证高质量的运营需要非常强的纪律。解决这对矛盾的方法就是使得运营计算机化和自动化，把人的精力尽量放在创造性上。
这种创造性应用于策略开发上，同时也应用与运营系统的实施和分析手段上。

对运营质量的分析往往对开发策略提供至关宝贵的信息，主要体现在两大方面：

* 策略在实际运营的成本估算，这种估算是动态的，尤其是因为受到不同的市场环境的影响。而对这些因数的掌握和学习是永无止境的。
* 实际运营中对不同的可能性或场景的模拟结果，为策略的组合搭配，参数的选取等等都提供不可缺一的材料。

由此可见，一个好的运营系统也是一个策略使用的学习系统。

量化投资的主要运营特征为换手率较高和投资标的较广，这样对交易质量的要求就更高。这就需要程序化交易系统。
交易系统也是运营的一部分，这里把这个课题突出了是因为有其特征而且与其他的运营项目比较正交。

运营项目大概思路如下：

* 运营成本的定义：基金净值，理论模型收益，运营成本三者的关系。
* 运营成本的构造：因子分析。
* 运营成本模型与模拟。

交易系统项目大致如下，

* 交易系统结构。
* 交易系统的主要模块：　组合管理系统 ``pms``, 订单管理系统 ``oms``, 执行系统 ``ems``。
* 交易质量基准： ``vwap``, ``twap`` 等
* 算法：基于这些基准的算法。

排版系统
****************

继续学习 ``sphinx``。开始建立文本编辑项目，步骤如下：

#. 安装 [SphinxInstallation]_ ：资料里面有非常详细的指引，由于所用的 ``linux``　系统已经安装了
   ``python3`` ，所以为了尽快能够把 ``sphinx`` 用起来，采用了指引中　``PyPI`` 的方法，外加几个有用的扩展。

   .. code-block:: shell

        pip install -U sphinx
        pip install -U sphinx-rtd-theme　sphinxcontrib-tikz　sphinxcontrib-plantuml
   

   试了一下发现 ``tikz``　还是不能用因为需要安装　``latex``　，``plantuml``　还没来得及试。
   以后还是要用　``docker``　容器来操作。这段时间先熟悉一下这个系统。

#. 配置 [SphinxSetup]_ ：配置相对简单，就是在项目的根目录下运行，

   .. code-block:: shell

        sphinx-quickstart

   这样就会自动生成

   ::

        |-- conf.py
        |-- index.rst
        |-- Makefile
        |-- make.bat
        |-- _build
        |-- _static
        |-- _templates

   
   其中　``conf.py`` 是设置文件， ``index.rst``　是头文件， ``_build`` 是一个文件夹，　
   ``Makefile`` 通过 ``make``　指令生成的 ``html``　文件存放在这里。 ``_static``　与 ``_templates``
   也是文件夹，分别用于存放渲染和结构指引性文件。

   产生 ``html``　文件的指令，

   .. code-block:: shell

        make html


#. 渲染 [SphinxTheme]_ ：决定采取 ``sphinx-rtd-theme`` [SphinxRTDTheme]_ 。


